#
# ebi.awk, generate code to initialize the ebi interface
#
# uses the config file to get the correct
# parameters...
#
BEGIN {
  regs = 0;
  ebi = 0;
  ahb2 = 0;
  ebi0_block = 0;
  ebi1_block = 0;
  ebi2_block = 0;
  ebi3_block = 0;
  
}

/^REGISTERS/ {
  regs = numericValue($2);
}

/^EBI_CLK/ {
    ebi = numericValue($2);
}

/^AHB1/ {
    ahb2 = int(numericValue($2)/2);
}

/^EBI0_CFG/ {
    ebi0_block = ebireg($2, $3, $4, $5);
}

/^EBI1_CFG/ {
    ebi1_block = ebireg($2, $3, $4, $5);
}

/^EBI2_CFG/ {
    ebi2_block = ebireg($2, $3, $4, $5);
}

/^EBI3_CFG/ {
    ebi3_block = ebireg($2, $3, $4, $5);
}

END {
  if (regs == 0) {
    print("can't find registers parameter!");
    exit(1);
  }

  if (ebi == 0) {
    print("can't find EBI_CLK!");
    exit(1);
  }


  scale = int( (ahb2)/ebi );
  
  #printf(" ahb2, ebi, scale: " (ahb2) ", " ebi ", " scale "\n");
  
  if ( int(scale * ebi) != int(ahb2)  || scale<1 || scale>16) {
      printf("invalid scale for ebi clock (" scale);
      printf("), must be 1..15 and divide ahb2 evenly\n");
      exit(1);
  }
  
  if (scale==16) scale = 0;

  printf("\t#\n\t# autogenerated by ebi.awk...\n\t#\n");

  ldreg("0x390", ebi0_block);
  ldreg("0x394", ebi1_block);
  ldreg("0x398", ebi2_block);
  ldreg("0x39c", ebi3_block);

  ldreg("0x380", or(lshift(1, 19),
		    or(lshift(1, 3), lshift(scale, 6))));
}

#
# sync	0	16	no
#
function ebireg(sync, wait, width, ben) {
    #
    # set clock enable bit...
    #
    reg = 0;

    if (sync == "sync") {
    }
    else if (sync == "async") {
	reg = or(reg, 1);
    }
    else {
	printf("invalid synchronous parameter, must be sync or async!\n");
	exit(1);
    }
    
    wait = numericValue(wait);
    if (wait<0 || wait>15) {
	printf("invalid wait states (" wait "), must be 0..15\n");
	exit(1);
    }
    reg = or(reg, lshift(wait, 1));
    
    width = numericValue(width);
    if (width==8) {
	reg = or(reg, lshift(1, 6));

	if ( ben == "yes" ) {
	    reg = or(reg, lshift(1, 7));
	}
	else if ( ben == "no" ) {
	}
	else {
	    printf("invalid byte enable (" ben ") must be yes or no!\n");
	    exit(1);
	}
    }
    else if (width==16) {
    }
    else {
	printf("invalid width (" width ") must be 8 or 16\n");
	exit(1);
    }

    return reg;
}

