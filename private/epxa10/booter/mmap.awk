#
# mmap.awk, initialize memory map, transfer control...
#
# uses the config file to get the correct
# parameters...
#
BEGIN {
  regs = 0;
  ebi0_map = 0;
  ebi0_addr = 0;
}

/^REGISTERS/ {
  regs = numericValue($2);
}

/^SDRAM0_MAP/ {
  sdram0_addr = numericValue($2);
  sdram0_map = mapreg($2, $3, $4);
}

/^SDRAM1_MAP/ {
  sdram1_addr = numericValue($2);
  sdram1_map = mapreg($2, $3, $4);
}

/^SRAM0_MAP/ {
  sram0_addr = numericValue($2);
  sram0_map = mapreg($2, $3, $4);
}

/^SRAM1_MAP/ {
  sram1_addr = numericValue($2);
  sram1_map = mapreg($2, $3, $4);
}

/^EBI0_MAP/ {
  ebi0_addr = numericValue($2);
  ebi0_map = mapreg($2, $3, $4);
}

/^EBI1_MAP/ {
  ebi1_addr = numericValue($2);
  ebi1_map = mapreg($2, $3, $4);
}

/^EBI2_MAP/ {
  ebi2_addr = numericValue($2);
  ebi2_map = mapreg($2, $3, $4);
}

/^EBI3_MAP/ {
  ebi3_addr = numericValue($2);
  ebi3_map = mapreg($2, $3, $4);
}

/^DPSRAM0_MAP/ {
  dpsram0_addr = numericValue($2);
  dpsram0_map = mapreg($2, $3, $4);
}

END {
  if (regs == 0) {
    print("can't find registers parameter!");
    exit(1);
  }

  if (ebi0_map == 0) {
    print("can't find EBI0_MAP parameter!");
    exit(1);
  }

  printf("\t#\n\t# autogenerated by mmap.awk...\n\t#\n");
  ldreg("0xc0", ebi0_map);

  printf("\t#\n\t# branch to copied ebi0...\n\t#\n");
  printf("\tldr\t\tr0, =0x%x\n", ebi0_addr);
  printf("\tadd\t\tpc, pc, r0\n");
  printf("\tnop\n\n");

  printf("\t#\n\t# turn off boot mapping...\n\t#\n");
  ldreg("0x0", 1);

  printf("\t#\n\t# setup the rest of the physical register map...\n\t#\n");
  if (sram0_map!=0)   ldreg("0x90", sram0_map);
  if (sram1_map!=0)   ldreg("0x94", sram1_map);
  if (dpsram0_map!=0) ldreg("0xa0", dpsram0_map);
  if (dpsram1_map!=0) ldreg("0xa4", dpsram1_map);
  if (sdram0_map!=0)  ldreg("0xb0", sdram0_map);
  if (sdram1_map!=0)  ldreg("0xb4", sdram1_map);
  #if (ebi0_map!=0)    ldreg("0xc0", ebi0_map);
  if (ebi1_map!=0)    ldreg("0xc4", ebi1_map);
  if (ebi2_map!=0)    ldreg("0xc8", ebi2_map);
  if (ebi3_map!=0)    ldreg("0xcc", ebi3_map);
  if (pld0_map!=0)    ldreg("0xd0", pld0_map);
  if (pld1_map!=0)    ldreg("0xd4", pld1_map);
  if (pld2_map!=0)    ldreg("0xd8", pld2_map);
  if (pld3_map!=0)    ldreg("0xdc", pld3_map);
}

function mapreg(addr, sz, pre) {
  addr = numericValue(addr);
  sz = numericValue(sz);
  if (pre=="yes") np = 0;
  else if (pre=="no") np = 2;
  else {
    printf("invalid prefetch parameter (" pre "), yes or no allowed...\n");
    exit(1);
  }
  return or(1,
	    or(int(int(addr/(16*1024)) * (16*1024)),
	       or(lshift(int(log(sz)/log(2))-1, 7),
		  np)));
}
